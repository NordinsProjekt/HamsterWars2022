@page "/battle"
@using Frontend.Pages.Component
@using Frontend.Service
@using DTO
@inject IJSRuntime JS
@using System.Text.Json
@using System.Text.Json.Serialization

<h1>Battle</h1>
@if (score != null)
{
    <div class="d-flex align-content-stretch flex-wrap flex-row">
    @foreach (var hamster in score.Contestants)
    {
        <div class="HamsterBattleScreen">
        <HamsterInfo infoHamster="hamster" />
        </div>
    }   
    </div>
}
@if (battle != null)
{
    <BattleHamster Battle="@battle" onBattleWinner="Vote" />
}
else
{
    @if (HasVoted)
    {
        <br />
        <center><img class="IndexPicture" src="img/misc/ThxVoting.jpg" /></center>
    }
    <button class="btn btn-primary" @onclick="CreateBattle">Generate match</button>
    <CreateMatch onCreateCustomMatch="DoBattle" />
}

@code {
    [Inject]
    AdminService adminService { get; set; }
    MatchDTO? battle;
    MatchDTO? score;
    public bool HasVoted { get; set; } = false;

    public async Task CreateBattle()
    {
        score = null;
        var hamster1 = await JS.InvokeAsync<HamsterDTO>("getAPI", "https://localhost:7232/hamsters/random");
        var hamster2 = await JS.InvokeAsync<HamsterDTO>("getAPI", "https://localhost:7232/hamsters/random");
        while (hamster1 == hamster2)
            hamster2 = await JS.InvokeAsync<HamsterDTO>("getAPI", "https://localhost:7232/hamsters/random");
        if (hamster1 == null || hamster2 == null)
            return;
        MatchCreateDTO m = new MatchCreateDTO(hamster1.Id, hamster2.Id, DateTime.Now, DateTime.Now);
        battle = await JS.InvokeAsync<MatchDTO>("postAPI", "https://localhost:7101/matches/", m);
        StateHasChanged();
    }

    public async Task Vote(int[] matchVote)
    {
        if (await adminService.VoteInBattle(matchVote))
        {
            score = await JS.InvokeAsync<MatchDTO>("getAPI", "https://localhost:7232/matches/" + matchVote[0]);
            HasVoted = true;
            battle = null;
        }
    }

    public async Task DoBattle(int id)
    {
        HasVoted = false;
        battle = await JS.InvokeAsync<MatchDTO>("getAPI", "https://localhost:7232/matches/" + id);
        StateHasChanged();
    }
}
