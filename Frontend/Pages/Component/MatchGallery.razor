@using DTO
@if (tour != null)
{
    <h3>MatchGallery</h3>
    <p>Click on a match to vote</p>
    <div class="d-flex flex-wrap">
    @foreach (var match in tour.Matches)
    {
        @if(match.IsCompleted == false)
            {
                <div class="p-2 bd-highlight">
                    <div @onclick="(() => SendMatch(match.Id))">
                        <p>
                            <b>Match Id: </b>@match.Id <br />
                            Startdate: @match.StartDate
                        </p>
                        @foreach (var hamster in match.Contestants)
                        {
                            <div class="MatchCardWithHamster">
                                <center><b>@hamster.Name</b></center>
                                <center><img width="75px" height="75px" src="img/hamsters/@hamster.ImgName" /></center>
                            </div>

                        }
                    </div>
                    <button @onclick="(() =>EndMatch(match.Id))">End Match</button>
                </div>
            }

    }
    </div>
}
@code {
    [Parameter]
    public TournamentDTO tour { get; set; }
    [Parameter]
    public EventCallback<int> onEndMatch { get; set; }
    [Parameter]
    public EventCallback<int> onMatchClick { get; set; }

    public async Task SendMatch(int id)
        => await onMatchClick.InvokeAsync(id);

    public async Task EndMatch(int id)
        => await onEndMatch.InvokeAsync(id);


}
